{"ast":null,"code":"var _jsxFileName = \"/Users/jamieanderson/Projects/portfolio/dex/client/src/AllTrades.jsx\";\nimport React from 'react';\nimport Moment from 'react-moment';\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AllTrades({\n  trades\n}) {\n  const renderList = (trades, className) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: `table table-striped trade-list mb-0 ${className}`,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: trades.map(trade => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: trade.price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Moment, {\n                fromNow: true,\n                children: parseInt(trade.date) * 1000\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 17\n            }, this)]\n          }, trade.tradeId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n\n  const renderChart = trades => {\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 200,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: trades,\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"price\",\n          stroke: \"#741cd7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#000000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"date\",\n          tickFormatter: dateStr => {\n            const date = new Date(parseInt(dateStr) * 1000);\n            return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          dataKey: \"price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"card-title\",\n      children: \"All trades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: [renderChart(trades), renderList(trades, 'trade-list')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AllTrades;\nexport default AllTrades;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllTrades\");","map":{"version":3,"sources":["/Users/jamieanderson/Projects/portfolio/dex/client/src/AllTrades.jsx"],"names":["React","Moment","ResponsiveContainer","LineChart","Line","CartesianGrid","XAxis","YAxis","AllTrades","trades","renderList","className","map","trade","amount","price","parseInt","date","tradeId","renderChart","dateStr","Date","getHours","getMinutes","getSeconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SACEC,mBADF,EAEEC,SAFF,EAGEC,IAHF,EAIEC,aAJF,EAKEC,KALF,EAMEC,KANF,QAOO,UAPP;;;;AASA,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA+B;AAC7B,QAAMC,UAAU,GAAG,CAACD,MAAD,EAASE,SAAT,KAAuB;AACxC,wBACE;AAAA,6BACE;AAAO,QAAA,SAAS,EAAG,uCAAsCA,SAAU,EAAnE;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAA,oBACGF,MAAM,CAACG,GAAP,CAAWC,KAAK,iBACf;AAAA,oCACE;AAAA,wBAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAKD,KAAK,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA,qCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,MAAf;AAAA,0BAAiBC,QAAQ,CAACH,KAAK,CAACI,IAAP,CAAR,GAAuB;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA,aAASJ,KAAK,CAACK,OAAf;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAwBD,GAzBD;;AA2BA,QAAMC,WAAW,GAAGV,MAAM,IAAI;AAC5B,wBACE,QAAC,mBAAD;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAkC,MAAA,MAAM,EAAE,GAA1C;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEA,MAAjB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,OAA9B;AAAsC,UAAA,MAAM,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AACE,UAAA,OAAO,EAAC,MADV;AAEE,UAAA,aAAa,EAAEW,OAAO,IAAI;AACxB,kBAAMH,IAAI,GAAG,IAAII,IAAJ,CAASL,QAAQ,CAACI,OAAD,CAAR,GAAoB,IAA7B,CAAb;AACA,mBAAQ,GAAEH,IAAI,CAACK,QAAL,EAAgB,IAAGL,IAAI,CAACM,UAAL,EAAkB,IAAGN,IAAI,CAACO,UAAL,EAAkB,EAApE;AACD;AALH;AAAA;AAAA;AAAA;AAAA,gBAHF,eAUE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD,GAjBD;;AAmBA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACGL,WAAW,CAACV,MAAD,CADd,EAEGC,UAAU,CAACD,MAAD,EAAS,YAAT,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;KA1DQD,S;AA4DT,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nfunction AllTrades({ trades }) {\n  const renderList = (trades, className) => {\n    return (\n      <>\n        <table className={`table table-striped trade-list mb-0 ${className}`}>\n          <thead>\n            <tr>\n              <th>amount</th>\n              <th>price</th>\n              <th>date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {trades.map(trade => (\n              <tr key={trade.tradeId}>\n                <td>{trade.amount}</td>\n                <td>{trade.price}</td>\n                <td>\n                  <Moment fromNow>{parseInt(trade.date) * 1000}</Moment>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n\n  const renderChart = trades => {\n    return (\n      <ResponsiveContainer width='100%' height={200}>\n        <LineChart data={trades}>\n          <Line type='monotone' dataKey='price' stroke='#741cd7' />\n          <CartesianGrid stroke='#000000' />\n          <XAxis\n            dataKey='date'\n            tickFormatter={dateStr => {\n              const date = new Date(parseInt(dateStr) * 1000);\n              return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n            }}\n          />\n          <YAxis dataKey='price' />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <div className='card'>\n      <h2 className='card-title'>All trades</h2>\n      <div className='row'>\n        <div className='col-sm-12'>\n          {renderChart(trades)}\n          {renderList(trades, 'trade-list')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AllTrades;\n"]},"metadata":{},"sourceType":"module"}